name: Docker Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile*'
      - 'docker-compose*'
      - 'server/**'
      - 'client/**'
  pull_request:
    branches: [ main ]

jobs:
  # Сборка Docker образов
  build-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker Hub login disabled for testing
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: false
          tags: |
            tg-mini-app-client:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: false
          tags: |
            tg-mini-app-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Деплой на Kubernetes (отключен для тестирования)
  # deploy-k8s:
  #   runs-on: ubuntu-latest
  #   needs: build-images
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Set up kubectl
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: 'latest'
  #
  #     - name: Configure kubectl
  #       run: |
  #         echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
  #         export KUBECONFIG=kubeconfig.yaml
  #
  #     - name: Deploy to Kubernetes
  #       run: |
  #         # Обновляем образы в deployment
  #         kubectl set image deployment/tg-mini-app-client client=${{ secrets.DOCKER_USERNAME }}/tg-mini-app-client:${{ github.sha }}
  #         kubectl set image deployment/tg-mini-app-server server=${{ secrets.DOCKER_USERNAME }}/tg-mini-app-server:${{ github.sha }}
  #         
  #         # Проверяем статус деплоя
  #         kubectl rollout status deployment/tg-mini-app-client
  #         kubectl rollout status deployment/tg-mini-app-server

  # Деплой на Docker Swarm (отключен для тестирования)
  # deploy-swarm:
  #   runs-on: ubuntu-latest
  #   needs: build-images
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Docker context
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: Deploy to Docker Swarm
  #       run: |
  #         echo "${{ secrets.SWARM_HOST_KEY }}" > swarm_key
  #         chmod 600 swarm_key
  #         
  #         # Подключаемся к swarm manager
  #         docker context create remote --docker "host=ssh://${{ secrets.SWARM_USER }}@${{ secrets.SWARM_HOST }}"
  #         docker context use remote
  #         
  #         # Деплоим сервисы
  #         docker stack deploy -c docker-compose.yml tg-mini-app

  # Сканирование образов на уязвимости (отключено для тестирования)
  # scan-images:
  #   runs-on: ubuntu-latest
  #   needs: build-images
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: '${{ secrets.DOCKER_USERNAME }}/tg-mini-app-client:latest'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #
  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       with:
  #         sarif_file: 'trivy-results.sarif'

  # Тестирование Docker образов (отключено для тестирования)
  # test-images:
  #   runs-on: ubuntu-latest
  #   needs: build-images
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: Test Client image
  #       run: |
  #         docker run --rm ${{ secrets.DOCKER_USERNAME }}/tg-mini-app-client:latest npm test --if-present
  #
  #     - name: Test Server image
  #       run: |
  #         docker run --rm ${{ secrets.DOCKER_USERNAME }}/tg-mini-app-server:latest npm test --if-present 