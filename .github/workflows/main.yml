name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Проверка качества кода
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies (Client)
        working-directory: ./client
        run: npm ci

      - name: Install dependencies (Server)
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
        run: npm ci

      - name: Lint Client
        working-directory: ./client
        run: npm run lint

      - name: Lint Server
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
        run: npm run lint

  # Тестирование
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies (Client)
        working-directory: ./client
        run: npm ci

      - name: Install dependencies (Server)
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
        run: npm ci

      - name: Run tests (Client)
        working-directory: ./client
        run: npm test --if-present

      - name: Run tests (Server)
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
        run: npm test --if-present

  # Сборка
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies (Client)
        working-directory: ./client
        run: npm ci

      - name: Install dependencies (Server)
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
        run: npm ci

      - name: Build Client
        working-directory: ./client
        run: npm run build

      - name: Build Server
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
          NODE_ENV: production
        run: npm run build

      - name: Upload Client Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: ./client/dist

      - name: Upload Server Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server-build
          path: ./server/dist

  # Деплой на staging (только для main ветки)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: ./client/dist

      - name: Download Server Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-build
          path: ./server/dist

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Здесь будет логика деплоя на staging
          # Например, для Vercel, Netlify, или собственного сервера

  # Деплой на production (только для тегов)
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: ./client/dist

      - name: Download Server Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-build
          path: ./server/dist

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Здесь будет логика деплоя на production
          # Например, для Vercel, Netlify, или собственного сервера 