name: Monitoring and Alerts

on:
  schedule:
    - cron: '*/5 * * * *' # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  workflow_dispatch: # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
  health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check Client Health
        run: |
          curl -f http://localhost:80 || exit 1
        continue-on-error: true

      - name: Check Server Health
        run: |
          curl -f http://localhost:3000/health || exit 1
        continue-on-error: true

      - name: Check Database Health
        run: |
          curl -f http://localhost:5432 || exit 1
        continue-on-error: true

  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  performance-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Check Response Time
        run: |
          echo "Checking response times..."
          curl -w "@curl-format.txt" -o /dev/null -s "http://localhost:80"
          curl -w "@curl-format.txt" -o /dev/null -s "http://localhost:3000/health"
        continue-on-error: true

      - name: Check Memory Usage
        run: |
          echo "Checking memory usage..."
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
        continue-on-error: true

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
  log-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Check for Errors in Logs
        run: |
          echo "Checking for errors in logs..."
          docker logs tg-mini-app-server 2>&1 | grep -i "error\|exception\|fatal" || echo "No errors found"
          docker logs tg-mini-app-client 2>&1 | grep -i "error\|exception\|fatal" || echo "No errors found"
        continue-on-error: true

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Check for Security Vulnerabilities
        run: |
          echo "Checking for security vulnerabilities..."
          npm audit --audit-level moderate || echo "Security check completed"
        working-directory: ./client
        continue-on-error: true

      - name: Check for Security Vulnerabilities (Server)
        run: |
          echo "Checking for security vulnerabilities..."
          npm audit --audit-level moderate || echo "Security check completed"
        working-directory: ./server
        continue-on-error: true

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
  notify-errors:
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring, log-monitoring]
    if: failure()
    steps:
      - name: Send Error Notification to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            üö® **Service Alert**
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            
            One or more services are experiencing issues.
            Please check the monitoring dashboard.

      - name: Send Error Notification to Telegram
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "üö® Service Alert\n\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\n\nOne or more services are experiencing issues. Please check the monitoring dashboard.",
              "parse_mode": "HTML"
            }'

  # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
  daily-report:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Generate Daily Report
        run: |
          echo "Generating daily monitoring report..."
          
          # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
          echo "=== Request Statistics ==="
          curl -s http://localhost:3000/stats || echo "Stats endpoint not available"
          
          # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          echo "=== Database Statistics ==="
          docker exec tg-mini-app-db psql -U postgres -d tg_mini_app -c "SELECT COUNT(*) as total_users FROM user;" || echo "Database not accessible"
          
          # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
          echo "=== Memory Usage ==="
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"

      - name: Send Daily Report
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#daily-reports'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            üìä **Daily Monitoring Report**
            
            Repository: ${{ github.repository }}
            Date: $(date)
            
            Services are running normally.
            Check the full report in the monitoring dashboard.

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
  auto-recovery:
    runs-on: ubuntu-latest
    needs: [health-check]
    if: failure()
    steps:
      - name: Attempt Auto Recovery
        run: |
          echo "Attempting auto recovery..."
          
          # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
          docker-compose restart server || echo "Failed to restart server"
          docker-compose restart client || echo "Failed to restart client"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
          sleep 30
          curl -f http://localhost:3000/health && echo "Recovery successful" || echo "Recovery failed"

      - name: Notify Recovery Status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            üîß **Auto Recovery Attempt**
            
            Repository: ${{ github.repository }}
            Status: ${{ job.status }}
            
            Auto recovery has been attempted.
            Please verify service status. 