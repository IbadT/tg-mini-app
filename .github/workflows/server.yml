name: Server CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'server/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'server/**'

jobs:
  # Проверка сервера
  server-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
        run: npm ci

      - name: Lint with ESLint
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
        run: npm run lint

      - name: Type check
        working-directory: ./server
        run: npm run type-check || npx tsc --noEmit

  # Тестирование сервера
  server-test:
    runs-on: ubuntu-latest
    needs: server-lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
        run: npm ci

      - name: Setup database
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
        run: |
          npx prisma generate
          npx prisma db push

      - name: Run tests
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          NODE_ENV: test
          SECRET: test-secret-key
        run: npm test --if-present

  # Сборка сервера
  server-build:
    runs-on: ubuntu-latest
    needs: [server-lint, server-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
        run: npm ci

      - name: Build
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
          NODE_ENV: production
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server-build
          path: ./server/dist
          retention-days: 30

  # Деплой сервера на Railway (отключен для тестирования)
  # server-deploy-railway:
  #   runs-on: ubuntu-latest
  #   needs: server-build
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: server-build
  #         path: ./server/dist
  #
  #     - name: Deploy to Railway
  #       uses: bervProject/railway-deploy@v1.0.0
  #       with:
  #         railway_token: ${{ secrets.RAILWAY_TOKEN }}
  #         service: ${{ secrets.RAILWAY_SERVICE }}

  # Деплой сервера на Render (отключен для тестирования)
  # server-deploy-render:
  #   runs-on: ubuntu-latest
  #   needs: server-build
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: server-build
  #         path: ./server/dist
  #
  #     - name: Deploy to Render
  #       run: |
  #         curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
  #           -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
  #           -H "Content-Type: application/json" \
  #           -d '{"clearCache": "do_not_clear"}'

  # Деплой на собственный сервер (SSH) (отключен для тестирования)
  # server-deploy-ssh:
  #   runs-on: ubuntu-latest
  #   needs: server-build
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: server-build
  #         path: ./server/dist
  #
  #     - name: Deploy to server via SSH
  #       uses: appleboy/ssh-action@v1.0.0
  #       with:
  #         host: ${{ secrets.SERVER_HOST }}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SERVER_SSH_KEY }}
  #         script: |
  #           cd /var/www/tg-mini-app
  #           git pull origin main
  #           npm ci
  #           npm run build
  #           pm2 restart tg-mini-app 