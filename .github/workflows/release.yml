name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (Client)
        working-directory: ./client
        run: npm ci

      - name: Install dependencies (Server)
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
        run: npm ci

      - name: Build Client
        working-directory: ./client
        run: npm run build

      - name: Build Server
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
          NODE_ENV: production
        run: npm run build

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## What's Changed
            
            ### Features
            - Golden Key Vault functionality
            - Telegram Mini App integration
            - User authentication system
            - Key management system
            
            ### Technical Improvements
            - React + TypeScript frontend
            - Node.js + Express backend
            - Prisma ORM with SQLite
            - RTK Query for API management
            
            ### Security
            - JWT authentication
            - Telegram init data validation
            - Input validation and sanitization
            
            ## Installation
            
            ```bash
            # Clone the repository
            git clone https://github.com/IbadT/tg-mini-app.git
            cd tg-mini-app
            ```
            
            ## Development
            
            ```bash
            # Install dependencies
            cd client && npm install
            cd ../server && npm install
            ```
            
            ## Environment Variables
            
            Create `.env` file in server directory:
            ```
            DATABASE_URL="file:./dev.db"
            SECRET="your-secret-key"
            BOT_TOKEN="your-telegram-bot-token"
            ```
            
            ## Running the Application
            
            ```bash
            # Start server
            cd server && npm run dev
            
            # Start client (in another terminal)
            cd client && npm run dev
            ```
          draft: false
          prerelease: false

      - name: Upload Client Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./client/dist
          asset_name: client-build.zip
          asset_content_type: application/zip

      - name: Upload Server Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./server/dist
          asset_name: server-build.zip
          asset_content_type: application/zip

  # –î–µ–ø–ª–æ–π –Ω–∞ production –ø–æ—Å–ª–µ —Ä–µ–ª–∏–∑–∞
  deploy-production:
    runs-on: ubuntu-latest
    needs: create-release
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (Client)
        working-directory: ./client
        run: npm ci

      - name: Install dependencies (Server)
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
        run: npm ci

      - name: Build Client
        working-directory: ./client
        run: npm run build

      - name: Build Server
        working-directory: ./server
        env:
          DATABASE_URL: file:./test.db
          SECRET: test-secret-key
          NODE_ENV: production
        run: npm run build

      - name: Deploy Client to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./client
          vercel-args: '--prod'

      - name: Deploy Server to Railway
        uses: bervProject/railway-deploy@v1.0.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE }}

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

      - name: Notify Telegram
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "üöÄ New release deployed: ${{ github.ref_name }}\n\nRepository: ${{ github.repository }}\nRelease: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
            }' 